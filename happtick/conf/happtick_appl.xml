<?xml version="1.0" encoding="UTF-8"?>

<!--
	Configuration file for Happtick applications.
	In standard roll out this file looks a little bit strange.
	Reason is the big number of comments which describe the nodes meaning.
	
	In production environments you can kill the comments and will get a clearly arranged xml file. 
-->

<root>
	<scheduler>
	   	<use chain="true" timer="true"></use>
	
	    <!-- chain
	         With chains it is possible to define process chains depending to events or other chains.
	         The scheduler tries to start the applications in the order like they are configured within a chain.
	         He uses the configuration details for applications:
	         - applicationId
	         - client ip
	         - executable
	         - dependencies
	         Other informations are ignored (options, timeplan, dependencies, etc.).
	    
	         If loop is true the chain will start again. For a chain which must be started depending to another chain it make
	         no sense setting loop to true.
	         Application start can depend to one event or prevented by one event.
	         When the skip flag is set to false the chain waits for the end of the application.
	         If skip = true and the preventEvent for a application is fired the chain overleaps this application and starts the next one.  
	     -->
	    <chains>
		    <!-- The list of chains.
		    	Chains can be chained to...
		    	Here also the order within the list is the order how the scheduler starts chains.
		     -->
	    	<chain>chain1</chain>
	    	<chain>chain2</chain>

		    <chain1 depends="false" loop="true" chainId="1">
		    	<!-- The order for start applications and ...chains -->
		    	<link>link0</link>
		    	<link>link2</link>
		    	<link>link1</link>
		    	
		    	<!-- The applications and chains to start
		    	     Note that id's here are named id for applications and for chains.
		    	     skip is optional, default is false.
		    	-->
				<link0 type="application" id="1" conditionEventId="1" preventEvendId="2" skip="false"></link0>
				<link1 type="application" id="2"></link1>
				<link2 type="chain" id="2"></link2>
		    </chain1>
		    
		    <chain2 depends="true" loop="false" chainId="2">
		    	<link>link0</link>
		    	<link>link1</link>
				<link0 type="application" id="1"></link0>
				<link1 type="application" id="2"></link1>
		    </chain2>
	    </chains>
	    
	    <!-- Events
	    	Events are raised by ApplicationClients and identified by the eventId or eventName.
	    	The actions after an event can differ for every client.
	    	If the event is essential for every client, the key 'firedByClient' can be omitted
	    	or the value of 'firedByClient' must be empty.
	    	With events it is possible to start another application or a chain or both.
	    	The following list stores the events for which the system has to react.
	    -->
	    <events>
	    	<event eventId="1" firedByApplicationId="4" eventClassName="ApplicationStopEvent" startApplicationId="1" startChainId="1"></event>
	    	<event eventId="2" firedByApplicationId="" eventClassName="AlarmEvent" startApplicationId="2"></event>
	    </events>
	
		<!-- List of applications.
		     Beneath of this list the configurations of the different applications follows.
		     The simple text of the applications here are the node names of the application configurations.
		     To 'disable' an application (ignored by Happtick) without loose or change the complex configuration surround it with comments here.
		-->
		<applications>
			<application>application1</application>
			<application>application2</application>
		</applications>
	
		<!-- Complex configurations of applications.
		     Here informations about the applications and the scheduling is defined.
		-->
		<!-- application1 is the referenced nodename (see above) -->
		<application1 applicationId="1">
	        <!-- client
	             ip of the client host (e.g. a pc) where the application should be started.
	        -->
			<client clientIp="192.168.130.1"></client>
			<!-- executable
			     type options are 'JAVA' or 'UNKNOWN'. If the application was implemented for or with the Happtick framework insert 'JAVA'.
			     path is the complete description of the executable which the start client has to start.
			     arg is a calling argument
			--> 
			<executable type="JAVA" path="c:/programme/blablubb.bat">
				<args>--blubb="1" --blase=2</args>
			</executable>
			<!-- schedule
			     
			-->
			<!-- option
			     multiplestart decides if an application may run multiple at the same time.
			     enforce is true if the application should run permanently.
			             If enforce is true and the application doesn't run the scheduler tries to start it. 
			-->
			<option multiplestart="false" enforce="false"></option>
			<!-- timeplan
			     Definition of time points when the application has to run.
			     Multiple values for a time unit (second, minute, ...) must be inserted in ascending order.
			     seconds   is a simple textual list of the seconds. For full minutes use * or 0.
			     minutes   is a simple textual list of the minutes. For full hours use * or 0.
			     hours     is a simple textual list of the hours. For every hour fill in * (not 0!). The day has 24 hours (setting am or pm is not possible). 
			     weekdays  is a simple textual list of reduction to appointed weekdays.
			               Use the first two letters of the days (e.g. TH for thursday). Use english or german shortcut. Not case sensitive
			     monthdays is a simple textual list of reduction to appointed days of the month (15, 20).
			     if weekday and monthday is defined the time points can be very seldom (e.g. there are not many Fridays on the 13. day in month).
			     
			     Use blanks or comma as delimiter for textual lists here.
			-->
			<timeplan> 
				<seconds>0 30</seconds> <!-- blank OR comma seperated -->
				<minutes>15</minutes>
				<hours>22,24</hours> <!-- blank OR comma seperated -->
				<weekdays>TU MI FR SU</weekdays> <!-- mixed english and german is allowed -->
				<monthdays>13</monthdays>
			</timeplan>
			
			<!-- dependencies
			     Here you have some facilities:
			     - Avoid the application start as long as other applications are running but start after they have stopped.
			     - Start another application AFTER the configured application has stopped.
			     - Start another application SYNCHRONOUS with the configured application.  
			-->
			<dependencies>
				<waitfor applicationId="55"></waitfor>
				<waitfor applicationId="66"></waitfor>
				<startafter applicationId="77"></startafter>
				<startafter applicationId="88"></startafter>
				<startsync applicationId="99"></startsync>
			</dependencies>
			
			<runtime maxStartStop="300" maxStepStep="10"></runtime>
		</application1>
		
		<application2 applicationId="2">
			<client clientIp="192.168.130.1"></client>
			<executable type="JAVA" path="c:/programme/holterdipolter.bat">
				<args>--xxx="10" --yyy=20</args>
			</executable>
			<option multiplestart="true" enforce="true"></option>
			<timeplan> 
				<seconds>0 30</seconds>
				<minutes>15</minutes>
				<hours>22,24</hours>
				<weekdays>TU MI FR SU</weekdays>
				<monthdays>13</monthdays>
			</timeplan>
			
			<dependencies>
				<waitfor applicationId="55"></waitfor>
				<waitfor applicationId="66"></waitfor>
				<startafter applicationId="77"></startafter>
				<startafter applicationId="88"></startafter>
				<startsync applicationId="99"></startsync>
			</dependencies>
			
			<runtime maxStartStop="300" maxStepStep="10"></runtime>
		</application2>
		
	</scheduler>	
</root>